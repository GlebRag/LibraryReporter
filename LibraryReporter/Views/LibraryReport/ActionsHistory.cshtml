@using LibraryReporter.Models.LibraryReport
@using LibraryReporter.Services
@model List<ActionsReportViewModel>
@inject AuthService authService
@inject UserService userService


<div class="tableBody">

    <div class="search-section">
        <form method="post" action="/LibraryReport/SearchActionsReport" class="search-form">
            <select name="action" class="search-input" id="Action">
                <option value="Delete">Удаление</option>
                <option value="Create">Создание</option>
                <option value="Edit">Редактирование</option>
                <option value="Issue">Выдача</option>
                <option value="Acceptance">Принятие</option>
            </select>
            <input type="date" name="dateFrom" placeholder="Введите начальную дату" class="search-input" id="DateFrom" />
            <input type="date" name="dateTo" placeholder="Введите конечную дату" class="search-input" id="DateTo" />
            <button type="submit" class="search-button">Найти</button>
            <button type="button" class="search-button" onclick="window.location.href='/LibraryReport/ActionsHistory'">Сбросить</button>
        </form>
    </div>

    <div class="creation-order">
        <a class="text-neutral-950 hover:text-orange-500 py-2 px-4 rounded-md bg-orange-200" onclick="createReport()">Создать отчет</a>
    </div>
    <table class="tableBook">
        <thead>
            <tr>
                <th>Фамилия сотрудника</th>
                <th>Событие</th>
                <th>Описание</th>
                <th>Дата исполнения</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var action in Model)
            {
                <tr>
                    <td>@action.ModerSurname</td>
                    <td>@action.Action</td>
                    <td>@action.Description</td>
                    <td>@action.ExecutionDate</td>

                </tr>
            }
        </tbody>
    </table>
    <div id="actionsSummary" style="margin-top:20px;"></div>
    <div id="mostActiveEmployee" style="margin-top:10px;"></div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Функция для поиска наиболее часто встречающегося значения в массиве.
    // Если ни один элемент не повторяется (максимальное количество повторов равно 1) – возвращает прочерк ("-").
    function findMostFrequent(items) {
        const counts = items.reduce((acc, item) => {
            acc[item] = (acc[item] || 0) + 1;
            return acc;
        }, {});
        let mostFrequent = "-";
        let maxCount = 1; // Если все встречаются только один раз, оставляем прочерк
        for (const key in counts) {
            if (counts[key] > maxCount) {
                mostFrequent = key;
                maxCount = counts[key];
            }
        }
        return mostFrequent;
    }

    // Функция для обновления сводной информации на странице.
    // Считает общее количество строк, извлекает даты из 4-го столбца (Дата исполнения),
    // сортирует их и формирует текстовый вывод. Также вычисляет самого активного сотрудника (столбец 1).
    function updateActionsSummary() {
        // Получаем все строки таблицы (без заголовка)
        const actionRows = document.querySelectorAll(".tableBook tbody tr");
        const totalActions = actionRows.length;

        // Извлекаем даты исполнения (из 4-го столбца, индекс 3)
        const dates = Array.from(actionRows).map(row => row.cells[3].textContent.trim());
        
        let summaryText = `<strong>Всего событий:</strong> <strong>${totalActions}</strong>`;
        if (dates.length > 0) {
            // Сортируем даты (предполагается, что дата в формате, понятном Date())
            const sortedDates = dates.sort((a, b) => new Date(a) - new Date(b));
            const minDate = sortedDates[0];
            const maxDate = sortedDates[sortedDates.length - 1];

            if (minDate === maxDate) {
                summaryText += ` <strong>за ${minDate}</strong>`;
            } else {
                summaryText += ` <strong>за период: ${minDate} по ${maxDate}</strong>`;
            }
        }
        document.getElementById("actionsSummary").innerHTML = summaryText;

        // Вычисляем самого активного сотрудника из первого столбца (Фамилия сотрудника)
        const employees = Array.from(actionRows).map(row => row.cells[0].textContent.trim());
        const mostActiveEmployee = findMostFrequent(employees);
        document.getElementById("mostActiveEmployee").innerHTML =
             `<strong>Самый активный сотрудник:</strong> ${mostActiveEmployee}`;
    }

    // Функция createReport() остается без изменений, она отвечает за генерацию отчёта.
    function createReport() {
        // Получаем текущую дату
        const today = new Date();
        const formattedDate = today.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
        }).replace(/\./g, '-'); // Например "20-04-2025"

        // Получаем ViewModel из Razor в формате JSON
        const data = @Html.Raw(Json.Serialize(Model));

        // Отправляем запрос на сервер для создания отчёта
        fetch('/LibraryReport/CreateReportForActions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => response.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = `Отчет_Работы_Книжного_Фонда_${formattedDate}.docx`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => console.error('Ошибка при создании отчета:', error));
    }

    // Вызываем функцию обновления сводной информации после загрузки страницы
    document.addEventListener("DOMContentLoaded", updateActionsSummary);
</script>



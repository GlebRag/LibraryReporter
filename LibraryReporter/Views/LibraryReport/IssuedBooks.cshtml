@using LibraryReporter.Models.LibraryReport
@using LibraryReporter.Services
@model List<IssuedBookReportViewModel>
@inject AuthService authService
@inject UserService userService


<div class="tableBody">

    <div class="search-section">
        <form method="post" action="/LibraryReport/SearchIssueBookReport" class="search-form">
            <input type="text" name="barcode" placeholder="Введите штрихкод" class="search-input" id="Barcode" />
            <input type="date" name="issueDate" placeholder="Введите дату выдачи" class="search-input" id="IssueDate" />
            <input type="date" name="acceptanceLastDate" placeholder="Введите дату возврата" class="search-input" id="AcceptanceLastDate" />
            <button type="submit" class="search-button">Найти</button>
        </form>
    </div>
    <div class="creation-order">
        <a class="text-neutral-950 hover:text-orange-500 py-2 px-4 rounded-md bg-orange-200" onclick="createReport()">Создать отчет</a>
    </div>
    <table class="tableBook">
        <thead>
            <tr>
                <th>Фамилия сотрудника</th>
                <th>Фамилия читателя</th>
                <th>Название книги</th>
                <th>Автор</th>
                <th>Издатель</th>
                <th>Штрихкод</th>
                <th>Дата выдачи</th>
                <th>Дата возврата</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in Model)
            {
                <tr>
                    <td>@book.ModerSurname</td>
                    <td>@book.ReaderSurname</td>
                    <td>@book.BookName</td>
                    <td>@book.Author</td>
                    <td>@book.Publisher</td>
                    <td>@book.Barcode</td>
                    <td>@book.IssueDate</td>
                    <td>@book.AcceptanceLastDate</td>

                </tr>
            }
        </tbody>
    </table>
    <div id="issuedBooksSummary" class="issuedBooksSummary">
        <strong>Всего выданных книг:</strong> <span id="totalIssuedBooks">0</span><br>
        <strong>За период:</strong> <span id="minDate">-</span> по <span id="maxDate">-</span>
    </div>

    <div id="mostFrequentStats" class="mostFrequentStats">
        <strong>Самый часто повторяющийся автор:</strong> <span id="mostFrequentAuthor">-</span><br>
        <strong>Самый часто повторяющийся издатель:</strong> <span id="mostFrequentPublisher">-</span><br>
        <strong>Самая часто выдаваемая книга:</strong> <span id="mostFrequentBook">-</span><br>
        <strong>Самый активный сотрудник:</strong> <span id="mostFrequentModerator">-</span>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    function updateIssuedBooksSummary() {
        const bookRows = document.querySelectorAll(".tableBook tbody tr");
        const totalBooks = bookRows.length;

        // Получаем список дат выдачи книг
        const dates = Array.from(bookRows).map(row => row.cells[6].textContent);

        let periodText = `<strong>Всего выданных книг:</strong> <strong>${totalBooks}</strong>`;

        if (dates.length === 0) {
            document.getElementById("issuedBooksSummary").innerHTML = periodText;
        } else {
            const sortedDates = dates.sort((a, b) => new Date(a) - new Date(b));
            const minDate = sortedDates[0];
            const maxDate = sortedDates[sortedDates.length - 1];

            if (minDate === maxDate) {
                periodText += ` <strong>за ${minDate}</strong>`;
            } else {
                periodText += ` <strong>за период: ${minDate} по ${maxDate}</strong>`;
            }

            document.getElementById("issuedBooksSummary").innerHTML = periodText;
        }
    }


    function findMostFrequentValue(selector) {
        const items = Array.from(document.querySelectorAll(selector)).map(el => el.textContent);
        const counts = items.reduce((acc, item) => {
            acc[item] = (acc[item] || 0) + 1;
            return acc;
        }, {});

        let mostFrequent = "-";
        let maxCount = 1;

        for (const item in counts) {
            if (counts[item] > maxCount) {
                mostFrequent = item;
                maxCount = counts[item];
            }
        }

        return mostFrequent;
    }

    function updateFrequentStats() {
        document.getElementById("mostFrequentAuthor").textContent = findMostFrequentValue(".tableBook td:nth-child(4)");
        document.getElementById("mostFrequentPublisher").textContent = findMostFrequentValue(".tableBook td:nth-child(5)");
        document.getElementById("mostFrequentBook").textContent = findMostFrequentValue(".tableBook td:nth-child(3)");
        document.getElementById("mostFrequentModerator").textContent = findMostFrequentValue(".tableBook td:nth-child(1)");
    }

    function createReport() {
        // Получаем текущую дату
        const today = new Date();
        const formattedDate = today.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
        }).replace(/\./g, '-'); // Форматируем дату в формате "20-04-2025"

        // Получаем ViewModel из Razor в формате JSON
        const data = @Html.Raw(Json.Serialize(Model));

        // Отправляем запрос на сервер
        fetch('/LibraryReport/CreateReportForIssuedBooks', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => response.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = `Отчет_Выданные_Книги_${formattedDate}.docx`; // Добавляем дату в название файла
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => console.error('Ошибка при создании отчета:', error));
    }

    // Вызываем функцию при загрузке страницы
    document.addEventListener("DOMContentLoaded", () => {
        updateIssuedBooksSummary();
        updateFrequentStats();
    });

</script>


